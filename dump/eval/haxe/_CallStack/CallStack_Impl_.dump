@:keep @:directlyUsed @:used @:using(haxe.CallStack) @:allow(haxe.Exception)
private class haxe._CallStack.CallStack_Impl_ {

	@:pure(true)
	public static function callStack() {
		return haxe.NativeStackTrace.callStack();
	}

	public static function exceptionStack() {
		return cast haxe._CallStack.CallStack_Impl_.subtract(cast haxe.NativeStackTrace.exceptionStack(), haxe._CallStack.CallStack_Impl_.callStack());
	}

	public static function toString(stack:haxe.CallStack) {
		var b = new StringBuf();
		{
			var ` = 0;
			var `1 = cast stack;
			while ((` < `1.length)) {
				var s = `1[` ++];
				b.add("\nCalled from ");
				haxe._CallStack.CallStack_Impl_.itemToString(b, s);
			};
		};
		return b.toString();
	}

	@:impl
	public static function subtract(this:Array<haxe.StackItem>, stack:haxe.CallStack) {
		var startIndex = -1;
		var i = -1;
		while ((++ i < this.length)) {
			{
				var ` = 0;
				var `1 = cast stack.length;
				while ((` < `1)) if ((haxe._CallStack.CallStack_Impl_.equalItems(this[i], cast stack[` ++]))) {
					if ((startIndex < 0)) startIndex = i;
					++ i;
					if ((i >= this.length)) break;
				} else startIndex = -1;
			};
			if ((startIndex >= 0)) break;
		};
		if ((startIndex >= 0)) return this.slice(0, startIndex) else return this;
	}

	@:pure(true)
	static function equalItems(item1:Null<haxe.StackItem>, item2:Null<haxe.StackItem>) {
		if ((item1 == null)) {
			if ((item2 == null)) return true else return false;
		} else switch ((@:exhaustive enumIndex item1)) {
			case 0: if ((item2 == null)) return false else if ((enumIndex item2 == 0)) return true else return false;
			case 1: if ((item2 == null)) return false else if ((enumIndex item2 == 1)) return item1[0] == item2[0] else return false;
			case 2: if ((item2 == null)) return false else if ((enumIndex item2 == 2)) {
				if ((item1[1] == item2[1] && item1[2] == item2[2] && item1[3] == item2[3])) return haxe._CallStack.CallStack_Impl_.equalItems(item1[0], item2[0]) else return false;
			} else return false;
			case 3: if ((item2 == null)) return false else if ((enumIndex item2 == 3)) {
				if ((item1[0] == item2[0])) return item1[1] == item2[1] else return false;
			} else return false;
			case 4: if ((item2 == null)) return false else if ((enumIndex item2 == 4)) return item1[0] == item2[0] else return false;
		};
	}

	static function itemToString(b:StringBuf, s:haxe.StackItem) {
		switch ((@:exhaustive enumIndex s)) {
			case 0: b.add("a C function");
			case 1: {
				b.add("module ");
				b.add(s[0]);
			};
			case 2: {
				var `4 = s[3];
				var `1 = s[0];
				{
					if ((`1 != null)) {
						haxe._CallStack.CallStack_Impl_.itemToString(b, `1);
						b.add(" (");
					};
					b.add(s[1]);
					b.add(" line ");
					b.add(s[2]);
					if ((`4 != null)) {
						b.add(" column ");
						b.add(`4);
					};
					if ((`1 != null)) b.add(")");
				};
			};
			case 3: {
				var `6 = s[0];
				{
					b.add(if ((`6 == null)) "<unknown>" else `6);
					b.add(".");
					b.add(s[1]);
				};
			};
			case 4: {
				b.add("local function #");
				b.add(s[0]);
			};
		};
	}
}