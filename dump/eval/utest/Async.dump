@:directlyUsed @:used @:allow(utest)
class utest.Async {

	@:value({ timeoutMs : 250 })
	function new(timeoutMs:Int = 250) {
		this.branches = [];
		this.callbacks = [];
		this.timedOut = false;
		this.resolved = false;
		this.timeoutMs = timeoutMs;
		this.startTime = Sys.time();
		this.timer = haxe.Timer.delay(this.setTimedOutState, timeoutMs);
	}

	@:value(false)
	public var resolved(default,null):Bool;

	@:value(false)
	public var timedOut(default,null):Bool;

	@:value([])
	var callbacks:Array<Void -> Void>;

	var timeoutMs:Int;

	var startTime:Float;

	var timer:haxe.Timer;

	@:value([])
	var branches:Array<utest.Async>;

	public function done(pos:Null<haxe.PosInfos> = null) {
		if ((this.resolved)) {
			if ((this.timedOut)) throw haxe.Exception.thrown("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.") else throw haxe.Exception.thrown("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is done already.");
		};
		this.resolved = true;
		this.timer.stop();
		{
			var ` = 0;
			var `1 = this.callbacks;
			while ((` < `1.length)) `1[` ++]();
		};
	}

	public function setTimeout(timeoutMs:Int, pos:Null<haxe.PosInfos> = null) {
		if ((this.resolved)) throw haxe.Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is done.");
		if ((this.timedOut)) throw haxe.Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
		this.timer.stop();
		this.timeoutMs = timeoutMs;
		this.timer = haxe.Timer.delay(this.setTimedOutState, timeoutMs - Math.round(1000 * (Sys.time() - this.startTime)));
	}

	public function branch(fn:Null<utest.Async -> Void> = null) {
		var branch = new utest.Async(this.timeoutMs);
		this.branches.push(branch);
		branch.then(this.checkBranches);
		if ((fn != null)) fn(branch);
		return branch;
	}

	function checkBranches() {
		var `this = this;
		if ((this.resolved)) return;
		{
			var ` = 0;
			var `1 = this.branches;
			while ((` < `1.length)) {
				var branch = `1[`];
				++ `;
				if ((! branch.resolved)) return;
				if ((branch.timedOut)) {
					this.setTimedOutState();
					return;
				};
			};
		};
		var branchCount = this.branches.length;
		haxe.Timer.delay(function() {
			if ((branchCount == `this.branches.length)) `this.done({fileName : "utest/Async.hx", lineNumber : 97, className : "utest.Async", methodName : "checkBranches"});
		}, 5);
	}

	function then(cb:Void -> Void) {
		if ((this.resolved)) cb() else this.callbacks.push(cb);
	}

	function setTimedOutState() {
		if ((this.resolved)) return;
		this.timedOut = true;
		this.done({fileName : "utest/Async.hx", lineNumber : 115, className : "utest.Async", methodName : "setTimedOutState"});
	}

	static var resolvedInstance:utest.Async;

	static function getResolved() {
		if ((utest.Async.resolvedInstance == null)) {
			utest.Async.resolvedInstance = new utest.Async(null);
			utest.Async.resolvedInstance.done({fileName : "utest/Async.hx", lineNumber : 30, className : "utest.Async", methodName : "getResolved"});
		};
		return utest.Async.resolvedInstance;
	}
}